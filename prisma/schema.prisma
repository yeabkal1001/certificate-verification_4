// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User Model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts       Account[]
  sessions       Session[]
  certificates   Certificate[]
  issuedTemplates Template[]     @relation("TemplateCreator")
  issuedCertificates Certificate[] @relation("CertificateIssuer")
  verificationLogs VerificationLog[]
}

enum UserRole {
  ADMIN
  STAFF
  STUDENT
}

// Certificate Template Model
model Template {
  id          String   @id @default(cuid())
  name        String
  description String?
  design      Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  isActive    Boolean  @default(true)
  
  createdBy   User     @relation("TemplateCreator", fields: [createdById], references: [id])
  certificates Certificate[]

  @@index([createdById])
}

// Certificate Model
model Certificate {
  id              String   @id @default(cuid())
  certificateId   String   @unique // Public ID for verification
  recipientId     String
  issuerId        String
  templateId      String
  title           String
  issueDate       DateTime @default(now())
  expiryDate      DateTime?
  metadata        Json?
  status          CertificateStatus @default(ACTIVE)
  revocationReason String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  recipient       User     @relation(fields: [recipientId], references: [id])
  issuer          User     @relation("CertificateIssuer", fields: [issuerId], references: [id])
  template        Template @relation(fields: [templateId], references: [id])
  verificationLogs VerificationLog[]

  @@index([recipientId])
  @@index([issuerId])
  @@index([templateId])
  @@index([status])
  @@index([issueDate])
  @@index([certificateId])
  @@index([createdAt])
}

enum CertificateStatus {
  ACTIVE
  EXPIRED
  REVOKED
}

// Verification Log Model
model VerificationLog {
  id            String   @id @default(cuid())
  certificateId String
  verifierId    String?
  ipAddress     String?
  userAgent     String?
  timestamp     DateTime @default(now())
  isValid       Boolean
  
  certificate   Certificate @relation(fields: [certificateId], references: [id])
  verifier      User?       @relation(fields: [verifierId], references: [id])

  @@index([certificateId])
  @@index([verifierId])
  @@index([timestamp])
  @@index([isValid])
}

// Audit Log Model
model AuditLog {
  id        String      @id @default(cuid())
  action    AuditAction
  entityId  String?
  entityType String?
  userId    String?
  metadata  Json?
  timestamp DateTime    @default(now())
  ipAddress String?
  
  @@index([action])
  @@index([entityId])
  @@index([userId])
  @@index([timestamp])
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  VERIFY
  REVOKE
}